From 665f4bc993fc3a9c1140a027f6f6bcfa3e93a6b0 Mon Sep 17 00:00:00 2001
From: Matteo Battaggia <matteo.battaggia@spacetest.com>
Date: Tue, 23 Feb 2016 13:59:54 +0100
Subject: [PATCH] camera driver allows image cropping

---
 copy_modules.sh                                    |    8 ++
 drivers/media/platform/mxc/capture/mt9p031.c       |  131 ++++++++++++++++---
 .../media/platform/mxc/capture/mxc_v4l2_capture.c  |  137 +++++++++++++-------
 3 files changed, 210 insertions(+), 66 deletions(-)
 create mode 100755 copy_modules.sh

diff --git a/copy_modules.sh b/copy_modules.sh
new file mode 100755
index 0000000..9a37098
--- /dev/null
+++ b/copy_modules.sh
@@ -0,0 +1,8 @@
+#!/bin/sh
+
+SRC_DIR="drivers/media/platform/mxc/capture"
+DST_DIR="/nfs_icore/lib/modules/3.10.17-1.0.1_ga+gdac46dc/kernel/drivers/media/platform/mxc/capture"
+
+cp $SRC_DIR/mt9p031_camera.ko $DST_DIR/
+cp $SRC_DIR/mxc_v4l2_capture.ko $DST_DIR/
+
diff --git a/drivers/media/platform/mxc/capture/mt9p031.c b/drivers/media/platform/mxc/capture/mt9p031.c
index 882654b..f99cd8f 100644
--- a/drivers/media/platform/mxc/capture/mt9p031.c
+++ b/drivers/media/platform/mxc/capture/mt9p031.c
@@ -19,6 +19,8 @@
  *
  */
 
+#define DEBUG
+
 #include <linux/module.h>
 #include <linux/init.h>
 #include <linux/slab.h>
@@ -37,7 +39,6 @@
 #include <linux/string.h>
 #include "mxc_v4l2_capture.h"
 
-
  /* Maximum number of devices on a board */
 #define MT9P031_DEVS 2
 
@@ -46,22 +47,22 @@
 #define MT9P031_DEBUG
 
 #ifdef MT9P031_DEBUG
-#define IN_FUNC DPRINTK_DRIVER("in %s:\n", __func__)
-#define DPRINTK_DRIVER(format, ...)				\
-	printk(KERN_INFO "############## mt9p031 driver " format, ## __VA_ARGS__)
+	#define IN_FUNC DPRINTK_DRIVER("in %s:\n", __func__)
+	#define DPRINTK_DRIVER(format, ...)				\
+		printk(KERN_INFO "mt9p031 driver " format, ## __VA_ARGS__)
+	#define print_pixel_format(pixelformat) \
+	{char a,b,c,d; \
+	    a = (char) (pixelformat >> 0); \
+	    b = (char) (pixelformat >> 8);\
+	    c = (char) (pixelformat >> 16);\
+	    d = (char) (pixelformat >> 24); \
+	    printk(KERN_INFO "in %s: pixelformat=%c%c%c%c(0x%x)\n", __func__, a, b, c, d, pixelformat);}
 #else
-#define IN_FUNC
-#define DPRINTK_DRIVER(format, ...)
+	#define IN_FUNC
+	#define DPRINTK_DRIVER(format, ...)
+	#define print_pixel_format(pixelformat)
 #endif
 
-#define print_pixel_format(pixelformat) \
-{char a,b,c,d; \
-    a = (char) (pixelformat >> 0); \
-    b = (char) (pixelformat >> 8);\
-    c = (char) (pixelformat >> 16);\
-    d = (char) (pixelformat >> 24); \
-    printk(KERN_INFO "in %s: pixelformat=%c%c%c%c(0x%x)\n", __func__, a, b, c, d, pixelformat);}
-
 #define MT9P031_CHIP_ID					0x1801
 #define REG_MT9P031_CHIP_VERSION		0x00
 #define REG_MT9P031_ROWSTART			0x01
@@ -156,6 +157,8 @@ static int ioctl_enum_framesizes(struct v4l2_int_device *s, struct v4l2_frmsizee
 static int ioctl_g_chip_ident(struct v4l2_int_device *s, int *id);
 static int ioctl_g_register(struct v4l2_int_device *s, struct v4l2_dbg_register *reg);
 static int ioctl_s_register(struct v4l2_int_device *s, struct v4l2_dbg_register *reg);
+static int ioctl_s_crop(struct v4l2_int_device *s, struct v4l2_crop *crop);
+static int ioctl_g_crop(struct v4l2_int_device *s, struct v4l2_crop *crop);
 
 static reg_param_t g_mt9p031_sequence_sensor_detection[] =
 {
@@ -453,6 +456,8 @@ static struct v4l2_int_ioctl_desc mt9p031_ioctl_desc[] =
     { .num = vidioc_int_g_chip_ident_num,       .func = (v4l2_int_ioctl_func*) ioctl_g_chip_ident },
     { .num = vidioc_int_g_register_num,         .func = (v4l2_int_ioctl_func*) ioctl_g_register },
     { .num = vidioc_int_s_register_num,         .func = (v4l2_int_ioctl_func*) ioctl_s_register },
+    { .num = vidioc_int_s_crop_num,             .func = (v4l2_int_ioctl_func*) ioctl_s_crop },
+    { .num = vidioc_int_g_crop_num,             .func = (v4l2_int_ioctl_func*) ioctl_g_crop },
 };
 
 static struct v4l2_int_slave mt9p031_slave[MT9P031_DEVS] =
@@ -566,7 +571,7 @@ static int mt9p031_register_read(const struct i2c_client *client, u16 command, u
     u8 buf[2];
     int ret;
 
-    IN_FUNC;
+//    IN_FUNC;
     buf[0] = command & 0xff;
     msg[0].addr = client->addr;
     msg[0].flags = 0;
@@ -596,7 +601,7 @@ static int mt9p031_register_write(const struct i2c_client *client, u16 command,
     u8 buf[3];
     int ret;
 
-    IN_FUNC;
+//    IN_FUNC;
     buf[0] = command & 0xff;
     data = swab16(data);
     memcpy(buf + 1, &data, 2);
@@ -715,7 +720,7 @@ static int ioctl_g_ifparm(struct v4l2_int_device *s, struct v4l2_ifparm *p)
     p->u.csi.data_en_pol = 0;
     p->u.csi.data_width = 1;
     p->u.csi.ext_vsync = 1;
-    p->u.csi.Vsync_pol = 1;
+    p->u.csi.Vsync_pol = 1; // ??? why is this?
     p->u.csi.Hsync_pol = 0;
     p->u.csi.pixclk_pol = 0;
     p->u.csi.set_mclk = 0;
@@ -843,6 +848,95 @@ static int ioctl_s_register(struct v4l2_int_device *s, struct v4l2_dbg_register
 
 	return 0;
 }
+
+static int ioctl_s_crop(struct v4l2_int_device *s, struct v4l2_crop *crop)
+{
+	struct sensor_data *sensor_data = s->priv;
+	u16 addr = 0, value = 0;
+	int retval;
+
+	IN_FUNC;
+
+	pr_debug("Setting crop to %d,%d|%ux%u.\n", crop->c.left, crop->c.top, crop->c.width, crop->c.height);
+
+	// reg[0x02] = (uint16_t)(left   + 0x10);   // column start    (left,   value in 0..2592, must be even)
+	// reg[0x04] = (uint16_t)(width  - 1);      // column size - 1 (width,  value in 1..2591, must be odd)
+	// reg[0x01] = (uint16_t)(top    + 0x36);   // row start       (top,    value in 0..1944, must be even)
+	// reg[0x03] = (uint16_t)(height - 1);      // row size - 1    (height, value in 1..1943, must be odd)
+
+	addr = (u16)0x02;
+	value = (u16)(crop->c.left + 0x10);
+	retval = mt9p031_register_write(sensor_data->i2c_client, addr, value);
+	if (retval) goto ioctl_s_crop__exit_with_failure;
+
+	addr = (u16)0x04;
+	value = (u16)(crop->c.width - 1);
+	retval = mt9p031_register_write(sensor_data->i2c_client, addr, value);
+	if (retval) goto ioctl_s_crop__exit_with_failure;
+
+	addr = (u16)0x01;
+	value = (u16)(crop->c.top + 0x36);
+	retval = mt9p031_register_write(sensor_data->i2c_client, addr, value);
+	if (retval) goto ioctl_s_crop__exit_with_failure;
+
+	addr = (u16)0x03;
+	value = (u16)(crop->c.height - 1);
+	retval = mt9p031_register_write(sensor_data->i2c_client, addr, value);
+	if (retval) goto ioctl_s_crop__exit_with_failure;
+
+	// Exit successfully.
+	return 0;
+
+	ioctl_s_crop__exit_with_failure:
+
+		pr_err("%s: mt9p031_reg_write (addr=0x%x, value=0x%x) failed\n", __func__, addr, value);
+		return retval;
+}
+
+static int ioctl_g_crop(struct v4l2_int_device *s, struct v4l2_crop *crop)
+{
+	struct sensor_data *sensor_data = s->priv;
+	u16 addr = 0, value = 0;
+	int retval;
+
+	IN_FUNC;
+
+	// reg[0x02] = (uint16_t)(left   + 0x10);   // column start    (left,   value in 0..2592, must be even)
+	// reg[0x04] = (uint16_t)(width  - 1);      // column size - 1 (width,  value in 1..2591, must be odd)
+	// reg[0x01] = (uint16_t)(top    + 0x36);   // row start       (top,    value in 0..1944, must be even)
+	// reg[0x03] = (uint16_t)(height - 1);      // row size - 1    (height, value in 1..1943, must be odd)
+
+	addr = (u16)0x02;
+	retval = mt9p031_register_read(sensor_data->i2c_client, addr, &value);
+	if (retval) goto ioctl_g_crop__exit_with_failure;
+	crop->c.left = value - 0x10;
+
+	addr = (u16)0x04;
+	retval = mt9p031_register_read(sensor_data->i2c_client, addr, &value);
+	if (retval) goto ioctl_g_crop__exit_with_failure;
+	crop->c.width = value + 1;
+
+	addr = (u16)0x01;
+	retval = mt9p031_register_read(sensor_data->i2c_client, addr, &value);
+	if (retval) goto ioctl_g_crop__exit_with_failure;
+	crop->c.top = value - 0x36;
+
+	addr = (u16)0x03;
+	retval = mt9p031_register_read(sensor_data->i2c_client, addr, &value);
+	if (retval) goto ioctl_g_crop__exit_with_failure;
+	crop->c.height = value + 1;
+
+	pr_debug("Getting crop: %d,%d|%ux%u\n", crop->c.left, crop->c.top, crop->c.width, crop->c.height);
+
+	// Exit successfully.
+	return 0;
+
+	ioctl_g_crop__exit_with_failure:
+
+		pr_err("%s: mt9p031_reg_read (addr=0x%x) failed\n", __func__, addr);
+		return retval;
+}
+
 static int ioctl_init(struct v4l2_int_device *s)
 {
     IN_FUNC;
@@ -966,10 +1060,11 @@ static int mt9p031_probe(struct i2c_client *client, const struct i2c_device_id *
 static int mt9p031_remove(struct i2c_client *client)
 {
     IN_FUNC;
-    v4l2_int_device_unregister(&mt9p031_int_device[mt9p031_count]);
 
 	mt9p031_count--;
 
+    v4l2_int_device_unregister(&mt9p031_int_device[mt9p031_count]);
+
     return 0;
 }
 
diff --git a/drivers/media/platform/mxc/capture/mxc_v4l2_capture.c b/drivers/media/platform/mxc/capture/mxc_v4l2_capture.c
index 2e66127..13ea9a2 100755
--- a/drivers/media/platform/mxc/capture/mxc_v4l2_capture.c
+++ b/drivers/media/platform/mxc/capture/mxc_v4l2_capture.c
@@ -1429,46 +1429,63 @@ static int mxc_v4l2_s_param(cam_data *cam, struct v4l2_streamparm *parm)
 	cam->crop_bounds.width = cam_fmt.fmt.pix.width;
 	cam->crop_bounds.height = cam_fmt.fmt.pix.height;
 
-	/*
-	 * Set the default current cropped resolution to be the same with
-	 * the cropping boundary(except for tvin module).
-	 */
-	if (cam->device_type != 1) {
-		cam->crop_current.width = cam->crop_bounds.width;
-		cam->crop_current.height = cam->crop_bounds.height;
-	}
+	// MOD-MB-20160209 - TBD - DEBU
+//	/*
+//	 * Set the default current cropped resolution to be the same with
+//	 * the cropping boundary(except for tvin module).
+//	 */
+//	if (cam->device_type != 1) {
+//		cam->crop_current.width = cam->crop_bounds.width;
+//		cam->crop_current.height = cam->crop_bounds.height;
+//	}
 
 	/* This essentially loses the data at the left and bottom of the image
 	 * giving a digital zoom image, if crop_current is less than the full
 	 * size of the image. */
 	ipu_csi_set_window_size(cam->ipu, cam->crop_current.width,
 				cam->crop_current.height, cam->csi);
-	ipu_csi_set_window_pos(cam->ipu, cam->crop_current.left,
-			       cam->crop_current.top,
-			       cam->csi);
-	ipu_csi_init_interface(cam->ipu, cam->crop_bounds.width,
-			       cam->crop_bounds.height,
-//			       cam_fmt.fmt.pix.pixelformat, csi_param);
-			       (cam_fmt.fmt.pix.pixelformat == V4L2_PIX_FMT_GREY   ||
-			        cam_fmt.fmt.pix.pixelformat == V4L2_PIX_FMT_SGRBG8 ||
-			        cam_fmt.fmt.pix.pixelformat == V4L2_PIX_FMT_SRGGB8)
-			       ? IPU_PIX_FMT_GENERIC : cam_fmt.fmt.pix.pixelformat,
-			       csi_param);
-
-//~ pr_debug("   csi_param.data_width=%d\n",csi_param.data_width);
-//~ pr_debug("   csi_param.clk_mode=%d\n",csi_param.clk_mode);
-//~ pr_debug("   csi_param.ext_vsync=%d\n",csi_param.ext_vsync);
-//~ pr_debug("   csi_param.Vsync_pol=%d\n",csi_param.Vsync_pol);
-//~ pr_debug("   csi_param.Hsync_pol=%d\n",csi_param.Hsync_pol);
-//~ pr_debug("   csi_param.pixclk_pol=%d\n",csi_param.pixclk_pol);
-//~ pr_debug("   csi_param.data_pol=%d\n",csi_param.data_pol);
-//~ pr_debug("   csi_param.sens_clksrc=%d\n",csi_param.sens_clksrc);
-//~ pr_debug("   csi_param.pack_tight=%d\n",csi_param.pack_tight);
-//~ pr_debug("   csi_param.force_eof=%d\n",csi_param.force_eof);
-//~ pr_debug("   csi_param.data_en_pol=%d\n",csi_param.data_en_pol);
-//~ pr_debug("   csi_param.data_fmt=%d\n",csi_param.data_fmt);
-//~ pr_debug("   csi_param.csi=%d\n",csi_param.csi);
-//~ pr_debug("   csi_param.mclk=%d\n",csi_param.mclk);
+
+	// MOD-MB-20160209 - Code specific to Aptina MT9P031 CMOS sensor.
+//	ipu_csi_set_window_pos(cam->ipu, cam->crop_current.left,
+//			       cam->crop_current.top,
+//			       cam->csi);
+//	ipu_csi_init_interface(cam->ipu, cam->crop_bounds.width,
+//			       cam->crop_bounds.height,
+////			       cam_fmt.fmt.pix.pixelformat, csi_param);
+//			       (cam_fmt.fmt.pix.pixelformat == V4L2_PIX_FMT_GREY   ||
+//			        cam_fmt.fmt.pix.pixelformat == V4L2_PIX_FMT_SGRBG8 ||
+//			        cam_fmt.fmt.pix.pixelformat == V4L2_PIX_FMT_SRGGB8)
+//			       ? IPU_PIX_FMT_GENERIC : cam_fmt.fmt.pix.pixelformat,
+//			       csi_param);
+	ipu_csi_set_window_pos(
+		cam->ipu,
+		0, // cam->crop_current.left,
+		0, // cam->crop_current.top,
+		cam->csi
+	);
+	ipu_csi_init_interface(
+		cam->ipu,
+		cam->crop_current.width, //cam->crop_bounds.width,
+		cam->crop_current.height, //cam->crop_bounds.height,
+		IPU_PIX_FMT_GENERIC,
+		csi_param
+	);
+
+	// TBD - DEBUG
+	pr_debug("   csi_param.data_width=%d\n", csi_param.data_width);
+	pr_debug("   csi_param.clk_mode=%d\n", csi_param.clk_mode);
+	pr_debug("   csi_param.ext_vsync=%d\n", csi_param.ext_vsync);
+	pr_debug("   csi_param.Vsync_pol=%d\n", csi_param.Vsync_pol);
+	pr_debug("   csi_param.Hsync_pol=%d\n", csi_param.Hsync_pol);
+	pr_debug("   csi_param.pixclk_pol=%d\n", csi_param.pixclk_pol);
+	pr_debug("   csi_param.data_pol=%d\n", csi_param.data_pol);
+	pr_debug("   csi_param.sens_clksrc=%d\n", csi_param.sens_clksrc);
+	pr_debug("   csi_param.pack_tight=%d\n", csi_param.pack_tight);
+	pr_debug("   csi_param.force_eof=%d\n", csi_param.force_eof);
+	pr_debug("   csi_param.data_en_pol=%d\n", csi_param.data_en_pol);
+	pr_debug("   csi_param.data_fmt=%d\n", csi_param.data_fmt);
+	pr_debug("   csi_param.csi=%d\n", csi_param.csi);
+	pr_debug("   csi_param.mclk=%d\n", csi_param.mclk);
 
 exit:
 	if (cam->overlay_on == true)
@@ -2038,17 +2055,7 @@ static long mxc_v4l_do_ioctl(struct file *file,
 	case VIDIOC_S_FMT: {
 		struct v4l2_format *sf = arg;
 		pr_debug("   case VIDIOC_S_FMT\n");
-pr_debug("$$VIDIOC_S_FMT (before)  sf->fmt.pix.pixelformat=%c%c%c%c\n",
-(sf->fmt.pix.pixelformat)&0xff,
-(sf->fmt.pix.pixelformat>>8)&0xff,
-(sf->fmt.pix.pixelformat>>16)&0xff,
-(sf->fmt.pix.pixelformat>>24)&0xff);
 		retval = mxc_v4l2_s_fmt(cam, sf);
-pr_debug("$$VIDIOC_S_FMT (after)  sf->fmt.pix.pixelformat=%c%c%c%c\n",
-(sf->fmt.pix.pixelformat)&0xff,
-(sf->fmt.pix.pixelformat>>8)&0xff,
-(sf->fmt.pix.pixelformat>>16)&0xff,
-(sf->fmt.pix.pixelformat>>24)&0xff);
 		break;
 	}
 
@@ -2230,7 +2237,25 @@ pr_debug("$$VIDIOC_S_FMT (after)  sf->fmt.pix.pixelformat=%c%c%c%c\n",
 			retval = -EINVAL;
 			break;
 		}
-		crop->c = cam->crop_current;
+
+		// MOD-MB-20160205
+		if (cam->sensor)
+			retval = vidioc_int_g_crop(cam->sensor, crop);
+		else {
+			pr_err("ERROR: v4l2 capture: slave not found!\n");
+			retval = -ENODEV;
+		}
+
+		if (crop->c.left   != cam->crop_current.left   ||
+			crop->c.top    != cam->crop_current.top    ||
+			crop->c.width  != cam->crop_current.width  ||
+			crop->c.height != cam->crop_current.height)
+		{
+			pr_err("ERROR: result of \"get_crop\" is different from \"camera.crop_current\".\n");
+		}
+
+//		crop->c = cam->crop_current;
+
 		break;
 	}
 
@@ -2248,6 +2273,14 @@ pr_debug("$$VIDIOC_S_FMT (after)  sf->fmt.pix.pixelformat=%c%c%c%c\n",
 			break;
 		}
 
+		// MOD-MB-20160205
+		if (cam->sensor)
+			retval = vidioc_int_s_crop(cam->sensor, crop);
+		else {
+			pr_err("ERROR: v4l2 capture: slave not found!\n");
+			retval = -ENODEV;
+		}
+
 		crop->c.top = (crop->c.top < b->top) ? b->top
 			      : crop->c.top;
 		if (crop->c.top > b->top + b->height)
@@ -2274,9 +2307,17 @@ pr_debug("$$VIDIOC_S_FMT (after)  sf->fmt.pix.pixelformat=%c%c%c%c\n",
 		ipu_csi_set_window_size(cam->ipu, cam->crop_current.width,
 					cam->crop_current.height,
 					cam->csi);
-		ipu_csi_set_window_pos(cam->ipu, cam->crop_current.left,
-				       cam->crop_current.top,
-				       cam->csi);
+		// MOD-MB-20160209 - Code specific to Aptina MT9P031 CMOS sensor.
+//		ipu_csi_set_window_pos(cam->ipu, cam->crop_current.left,
+//				       cam->crop_current.top,
+//				       cam->csi);
+		ipu_csi_set_window_pos(
+			cam->ipu,
+			0, // cam->crop_current.left,
+			0, // cam->crop_current.top,
+			cam->csi
+		);
+
 		break;
 	}
 
-- 
1.7.9.5

